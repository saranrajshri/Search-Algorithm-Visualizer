{"version":3,"sources":["components/LinearSeach.js","components/BinarySearch.js","components/JumpSearch.js","App.js","serviceWorker.js","index.js"],"names":["LinearSearch","useState","array","setArray","currentIndex","setCurrentIndex","target","setTarget","resultIndex","setResultIndex","generateArray","tempArray","i","number","Math","floor","random","push","useEffect","sleep","milliseconds","Promise","resolve","setTimeout","linearSearch","a","length","parseInt","Button","primary","onClick","className","Input","focus","placeholder","onChange","e","value","color","map","index","key","Divider","BinarySearch","leftIndex","setLeftIndex","rightIndex","setRightIndex","binarySearch","left","right","mid","JumpSearch","prevIndex","setPrevIndex","stepIndex","setStepIndex","jumpSearch","step","sqrt","prev","n","min","panes","menuItem","render","Tab","Pane","App","Container","Header","as","icon","faSearch","menu","fluid","vertical","tabular","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23923d9c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport \"./LinearSearch.css\";\nimport { Button, Input, Divider } from \"semantic-ui-react\";\n\nconst LinearSearch = () => {\n  const [array, setArray] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [target, setTarget] = useState(-1);\n  const [resultIndex, setResultIndex] = useState(-1);\n\n  const generateArray = () => {\n    var tempArray = [];\n    for (var i = 0; i < 20; i++) {\n      var number = Math.floor(Math.random() * 100 + 1);\n      tempArray.push(number);\n    }\n    setArray(tempArray);\n  };\n\n  // Component Did Mount\n  useEffect(() => {\n    generateArray();\n  }, []);\n\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  const handleChange = (e) => {\n    setTarget(e.target.value);\n  };\n\n  // linear Search\n  const linearSearch = async () => {\n    for (var i = 0; i < array.length; i++) {\n      setCurrentIndex(i);\n      await sleep(1000);\n      setCurrentIndex(i + 1);\n      if (array[i] === parseInt(target)) {\n        setCurrentIndex(i);\n        setResultIndex(i);\n        break;\n      }\n    }\n  };\n  return (\n    <div>\n      <Button primary onClick={generateArray}>\n        Generate new array\n      </Button>\n      <div className=\"formWrapper\">\n        <Input\n          focus\n          placeholder=\"Element to be found\"\n          className=\"inputField\"\n          onChange={handleChange}\n        />\n        <Button color=\"green\" onClick={linearSearch}>\n          Visualize\n        </Button>\n      </div>\n      <div className=\"node-wrapper\">\n        {array.map((value, index) => {\n          return (\n            <div\n              key={index}\n              className={index === currentIndex ? \"node currentNode\" : \"node\"}\n            >\n              {value}\n            </div>\n          );\n        })}\n      </div>\n\n      {resultIndex === -1 ? (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Not Found\n          </p>\n        </div>\n      ) : (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Found at index {resultIndex}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LinearSearch;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./BinarySearch.css\";\nimport { Button, Input, Divider } from \"semantic-ui-react\";\n\nconst BinarySearch = () => {\n  const [array, setArray] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [leftIndex, setLeftIndex] = useState(-1);\n  const [rightIndex, setRightIndex] = useState(-1);\n  const [target, setTarget] = useState(-1);\n  const [resultIndex, setResultIndex] = useState(-1);\n\n  const generateArray = () => {\n    setCurrentIndex(-1);\n    setLeftIndex(-1);\n    setRightIndex(-1);\n    setResultIndex(-1);\n\n    var tempArray = [];\n    var number = Math.floor(Math.random() * 100 + 1);\n    for (var i = number; i < number + 20; i++) {\n      tempArray.push(i);\n    }\n    setArray(tempArray);\n  };\n\n  // Component Did Mount\n  useEffect(() => {\n    generateArray();\n  }, []);\n\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  const handleChange = (e) => {\n    setTarget(e.target.value);\n  };\n\n  // binary Search\n  const binarySearch = async () => {\n    var left = 0;\n    setLeftIndex(left);\n    var right = array.length;\n    setRightIndex(right);\n\n    while (left <= right) {\n      var mid = Math.floor(left + (right - left) / 2);\n      setCurrentIndex(mid);\n      if (array[mid] === parseInt(target)) {\n        setResultIndex(mid);\n        break;\n      } else if (array[mid] < target) {\n        left = mid + 1;\n        setLeftIndex(left);\n        await sleep(1000);\n      } else {\n        right = mid - 1;\n        setRightIndex(right);\n        await sleep(1000);\n      }\n    }\n  };\n  return (\n    <div>\n      <Button primary onClick={generateArray}>\n        Generate new array\n      </Button>\n      <div className=\"formWrapper\">\n        <Input\n          focus\n          placeholder=\"Element to be found\"\n          className=\"inputField\"\n          onChange={handleChange}\n        />\n        <Button color=\"green\" onClick={binarySearch}>\n          Visualize\n        </Button>\n      </div>\n      <div className=\"node-wrapper\">\n        {array.map((value, index) => {\n          return (\n            <div\n              key={index}\n              className={\n                index === currentIndex\n                  ? \"node currentNode\"\n                  : index >= leftIndex && index <= rightIndex\n                  ? \"node rangeNode\"\n                  : \"node\"\n              }\n            >\n              {value}\n            </div>\n          );\n        })}\n      </div>\n\n      {resultIndex === -1 ? (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Not Found\n          </p>\n        </div>\n      ) : (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Found at index {resultIndex}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BinarySearch;\n","import React, { useState, useEffect } from \"react\";\n\n// StyleSheet\nimport \"./JumpSearch.css\";\n\n// Semantic UI\nimport { Button, Input, Divider } from \"semantic-ui-react\";\n\nconst JumpSearch = () => {\n  const [array, setArray] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  const [prevIndex, setPrevIndex] = useState(-1);\n  const [stepIndex, setStepIndex] = useState(-1);\n  const [target, setTarget] = useState(-1);\n  const [resultIndex, setResultIndex] = useState(-1);\n\n  const generateArray = () => {\n    setCurrentIndex(-1);\n    setResultIndex(-1);\n    setPrevIndex(-1);\n    setStepIndex(-1);\n    var tempArray = [];\n    var number = Math.floor(Math.random() * 100 + 1);\n    for (var i = number; i < number + 20; i++) {\n      tempArray.push(i);\n    }\n    setArray(tempArray);\n  };\n\n  // Component Did Mount\n  useEffect(() => {\n    generateArray();\n  }, []);\n\n  const sleep = (milliseconds) => {\n    return new Promise((resolve) => setTimeout(resolve, milliseconds));\n  };\n\n  const handleChange = (e) => {\n    setTarget(e.target.value);\n  };\n\n  // jump Search\n  const jumpSearch = async () => {\n    var step = Math.floor(Math.sqrt(array.length));\n    setStepIndex(step);\n    await sleep(1000);\n    var prev = 0;\n    var n = array.length;\n    while (array[Math.min(step, n) - 1] < target) {\n      prev = step;\n      setPrevIndex(prev);\n      await sleep(1000);\n      step += Math.floor(Math.sqrt(n));\n      setStepIndex(step);\n      await sleep(1000);\n      if (prev >= n) {\n        setCurrentIndex(-1);\n        setResultIndex(-1);\n        break;\n      }\n    }\n\n    while (array[prev] < target) {\n      prev++;\n      setPrevIndex(prev);\n      await sleep(1000);\n      if (prev === Math.min(step, n)) {\n        setCurrentIndex(-1);\n        setResultIndex(-1);\n        break;\n      }\n    }\n\n    if (array[prev] === parseInt(target)) {\n      setResultIndex(prev);\n      setCurrentIndex(prev);\n    }\n  };\n\n  return (\n    <div>\n      <Button primary onClick={generateArray}>\n        Generate new array\n      </Button>\n      <div className=\"formWrapper\">\n        <Input\n          focus\n          placeholder=\"Element to be found\"\n          className=\"inputField\"\n          onChange={handleChange}\n        />\n        <Button color=\"green\" onClick={jumpSearch}>\n          Visualize\n        </Button>\n      </div>\n      <div className=\"node-wrapper\">\n        {array.map((value, index) => {\n          return (\n            <div\n              key={index}\n              className={\n                index === currentIndex\n                  ? \"node currentNode\"\n                  : index === prevIndex\n                  ? \"node rangeNode\"\n                  : index >= stepIndex - Math.floor(Math.sqrt(array.length)) &&\n                    index <= stepIndex\n                  ? \"node stepIndexNode\"\n                  : \"node\"\n              }\n            >\n              {value}\n            </div>\n          );\n        })}\n      </div>\n\n      {resultIndex === -1 ? (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Not Found\n          </p>\n        </div>\n      ) : (\n        <div>\n          <Divider />\n          <p>\n            <b>Result</b> : Found at index {resultIndex}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default JumpSearch;\n","import React from \"react\";\n\n// Semantic UI Components\nimport { Tab, Container, Header } from \"semantic-ui-react\";\n\n// Components\nimport LinearSearch from \"./components/LinearSeach\";\nimport BinarySearch from \"./components/BinarySearch\";\nimport JumpSearch from \"./components/JumpSearch\";\n\n// Stylesheet\nimport \"./App.css\";\n\n// FontAwesome\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst panes = [\n  {\n    menuItem: \"Linear Search\",\n    render: () => (\n      <Tab.Pane>\n        <LinearSearch />\n      </Tab.Pane>\n    ),\n  },\n  {\n    menuItem: \"Binary Search\",\n    render: () => (\n      <Tab.Pane>\n        <BinarySearch />\n      </Tab.Pane>\n    ),\n  },\n  {\n    menuItem: \"Jump Search\",\n    render: () => (\n      <Tab.Pane>\n        <JumpSearch />\n      </Tab.Pane>\n    ),\n  },\n];\n\nconst App = () => {\n  return (\n    <div className=\"root\">\n      <Container>\n        <center>\n          <Header as=\"h3\">\n            <FontAwesomeIcon icon={faSearch} className=\"color-red\" />\n            <span className=\"color-red\">\n              {\"     \"} Search {\"   \"}\n            </span>\n            <span className=\"color-blue\">Alogrithm {\"  \"} </span>\n            <span className=\"color-green\">Visualizer {\"   \"}</span>\n          </Header>\n        </center>\n        <br />\n        <Tab\n          menu={{ fluid: true, vertical: true, tabular: true }}\n          panes={panes}\n        />\n\n        <div className=\"footer\">\n          <center>\n            {/* <p>\n              Made By{\" \"}\n              <a href=\"https://linkedin.com/in/saranrajshri\" target=\"_blank\">\n                Shri Saran Raj\n              </a>\n            </p> */}\n          </center>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}